17. You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's 
(representing civilians). The soldiers are positioned in front of the civilians. That is, 
all the 1's will appear to the left of all the 0's in each row. 
A row i is weaker than a row j if one of the following is true: 
The number of soldiers in row i is less than the number of soldiers in row j. 
Both rows have the same number of soldiers and i < j. Return the indices of the k 
weakest rows in the matrix ordered from weakest to strongest. 
Example 1: 
Input: mat =  
[[1,1,0,0,0], 
[1,1,1,1,0], 
[1,0,0,0,0], 
[1,1,0,0,0], 
[1,1,1,1,1]],  
k = 3 
Output: [2,0,3] 
Explanation:  
The number of soldiers in each row is:  - Row 0: 2  - Row 1: 4  - Row 2: 1  - Row 3: 2  - Row 4: 5  
The rows ordered from weakest to strongest are [2,0,3,1,4].

CODE:
public class WeakestRows {
    public static void main(String[] args) {
        int[][] mat = {
            {1,1,0,0,0},
            {1,1,1,1,0},
            {1,0,0,0,0},
            {1,1,0,0,0},
            {1,1,1,1,1}
        };
        int k = 3;

        int rows = mat.length;
        int[] soldierCount = new int[rows];
        int[] indices = new int[rows];

        // Count soldiers in each row and store row indices
        for (int i = 0; i < rows; i++) {
            int count = 0;
            for (int j = 0; j < mat[i].length; j++) {
                if (mat[i][j] == 1) count++;
            }
            soldierCount[i] = count;
            indices[i] = i;
        }

        // Simple selection sort based on soldier count, then row index
        for (int i = 0; i < rows - 1; i++) {
            for (int j = i + 1; j < rows; j++) {
                if (soldierCount[i] > soldierCount[j] || 
                   (soldierCount[i] == soldierCount[j] && indices[i] > indices[j])) {
                    // Swap counts
                    int tempCount = soldierCount[i];
                    soldierCount[i] = soldierCount[j];
                    soldierCount[j] = tempCount;
                    // Swap indices
                    int tempIndex = indices[i];
                    indices[i] = indices[j];
                    indices[j] = tempIndex;
                }
            }
        }

        // Print the first k weakest rows
        System.out.print("[");
        for (int i = 0; i < k; i++) {
            System.out.print(indices[i]);
            if (i < k - 1) System.out.print(",");
        }
        System.out.println("]");
    }
}
